{% import "fmt" %}
{% import "strconv" %}
{% import "meguca/config" %}
{% import "meguca/common" %}
{% import "meguca/lang" %}
{% import "meguca/auth" %}
{% import "meguca/imager/assets" %}
{% import banners "meguca/assets" %}

{% func renderNoscriptThreadForm(id string, conf config.BoardConfContainer, pos auth.ModerationLevel) %}{% stripspace %}
	{% code ln := lang.Get() %}
	<form id="new-thread-form" action="/html/thread" method="POST" enctype="multipart/form-data">
		{% if id == "all" %}
			<select name="board" required>
				{% for _, b := range config.GetBoardTitles() %}
					<option value="{%s b.ID %}">
						{%= formatTitle(b.ID, b.Title) %}
					</option>
				{% endfor %}
			</select>
			<br>
		{% else %}
			<input type="text" name="board" value="{%s conf.ID %}" hidden>
		{% endif %}
		<input name="subject" placeholder="{%s ln.UI["subject"] %}" required type="text" maxlength="100">
		<br>
		{%= noscriptPostCreationFields(pos) %}
		{%= uploadForm() %}
		{%= captcha() %}
		{%= submit(false) %}
	</form>
{% endstripspace %}{% endfunc %}

{% func renderBanner(conf config.BoardConfContainer) %}{% stripspace %}
	{% code bannerID, mime, ok := banners.Banners.Random(conf.ID) %}
	{% if ok %}
		<h1 class="image-banner">
			{% code url := fmt.Sprintf("/banners/%s/%d", conf.ID, bannerID) %}
			{% if mime == "video/webm" %}
				<video src="{%s url %}" autoplay loop>
			{% else %}
				<img src="{%s url %}">
			{% endif %}
		</h1>
	{% endif %}
{% endstripspace %}{% endfunc %}

{% func renderBoardSearch(catalog bool) %}{% stripspace %}
	{% code ln := lang.Get() %}
	{% code inputClass := "board-search-input" %}
	{% code if catalog { inputClass += " board-search-input_catalog" } %}
	<div class="board-search">
		<input class="{%s inputClass %}" type="text" placeholder="{%s ln.UI["search"] %}">
		{% if catalog %}
			<select class="board-search-sort" name="sortMode">
				{% for i, s := range [...]string{"bump", "creation", "replyCount", "fileCount"} %}
					<option class="board-search-sort-mode" value="{%s s %}">
						{%s ln.SortModes[i] %}
					</option>
				{% endfor %}
			</select>
		{% endif %}
	</div>
{% endstripspace %}{% endfunc %}

{% func renderBoardNavigation(page, total int, catalog, top bool) %}{% stripspace %}
	{% code ln := lang.Get() %}
	{% code cls := "board-nav_top" %}
	{% code if !top { cls = "board-nav_bottom" } %}
	<nav class="board-nav{% space %}{%s cls %}">
		{% if top && !catalog %}
			<a class="button board-nav-item board-nav-new-thread trigger-open-reply">
				{%s ln.UI["newThread"] %}
			</a>
		{% endif %}
		{%= catalogLink(catalog) %}
		{% if !catalog %}
			{%= pagination(page, total) %}
		{% endif %}
		{% if top %}
			{%= renderBoardSearch(catalog) %}
		{% endif %}
	</nav>
{% endstripspace %}{% endfunc %}

{% func renderBoard(threadHTML []byte, id, title string, conf config.BoardConfContainer, page, total int, pos auth.ModerationLevel, catalog bool) %}{% stripspace %}
	<section class="board" id="threads">
		{%= renderBanner(conf) %}
		<h1 class="page-title">{%s title %}</h1>
		<aside class="reply-container reply-container_board"></aside>
		{%= renderBoardNavigation(page, total, catalog, true) %}
		<hr class="separator">
		{%z= threadHTML %}
		<hr class="separator">
		{%= renderBoardNavigation(page, total, catalog, false) %}
	</section>
{% endstripspace %}{% endfunc %}

CatalogThreads renders thread content for a catalog page. Separate
function to allow caching of generated posts.
{% func CatalogThreads(threads []common.Thread, json []byte, all bool) %}{% stripspace %}
	<section class="catalog" id="catalog">
		{% for i, t := range threads %}
			{%= catalogThread(t, i) %}
		{% endfor %}
		<script id="post-data" type="application/json">
			{%z= json %}
		</script>
	</section>
{% endstripspace %}{% endfunc %}

{% func catalogThread(t common.Thread, i int) %}{% stripspace %}
	{% code idStr := strconv.FormatUint(t.ID, 10) %}
	{% code url := fmt.Sprintf("/%s/%s", t.Board, idStr) %}
	<article class="post-catalog-wrapper" style="z-index: {%d -i %}" data-id="{%s idStr %}">
		<article class="post post_op post_catalog">
			{% if t.Image != nil %}
				<figure class="post-file">
					{% code img := *t.Image %}
					<a class="post-file-link" href="{%s url %}">
						<img class="post-file-thumb" src="{%s assets.ThumbPath(img.ThumbType, img.SHA1) %}" width="{%d int(img.Dims[2]) %}" height="{%d int(img.Dims[3]) %}">
					</a>
				</figure>
			{% endif %}
			<div class="post-header">
				<a class="post-header-item post-id" href="{%s url %}">#{%s idStr %}</a>
				<h3 class="post-header-item post-subject">{%s t.Subject %}</h3>
				<span class="post-header-item post-catalog-counter post-posts-counter">
					<i class="fa fa-comment">{% space %}{%d int(t.PostCtr) %}</i>
				</span>
				{% if t.ImageCtr > 0 %}
					<span class="post-header-item post-catalog-counter post-files-counter">
						<i class="fa fa-image">{% space %}{%d int(t.ImageCtr) %}</i>
					</span>
				{% endif %}
			</div>
			<blockquote class="post-catalog-message">{%s t.Body %}</blockquote>
		</article>
	</article>
{% endstripspace %}{% endfunc %}

IndexThreads renders abbreviated threads for display on board index pages
{% func IndexThreads(threads []common.Thread, json []byte, all bool) %}{% stripspace %}
	{% code bls := extractBacklinks(15*6, threads...) %}
	<section class="threads-container" id="index-thread-container">
		{% for _, t := range threads %}
			{% code idStr := strconv.FormatUint(t.ID, 10) %}
			<article class="thread thread_index" id="thread{%s idStr %}" data-id="{%s idStr %}">
				{%= renderThreadPosts(t, bls, true, all, false) %}
				<hr class="separator">
			</article>
		{% endfor %}
		<script id="post-data" type="application/json">
			{%z= json %}
		</script>
		{%= encodeBacklinks(bls) %}
	</section>
{% endstripspace %}{% endfunc %}

Render noscript-specific post creation fields
{% func noscriptPostCreationFields(pos auth.ModerationLevel) %}{% stripspace %}
	{% code ln := lang.Get() %}
	{% if pos > auth.NotStaff %}
		{%= input(staffTitleSpec.wrap(), ln) %}
	{% endif %}
	{% for _, s := range specs["noscriptPostCreation"] %}
		{%= input(s, ln) %}
	{% endfor %}
{% endstripspace %}{% endfunc %}

Render image upload form
{% func uploadForm() %}{% stripspace %}
	<span class="upload-container">
		<strong class="upload-status"></strong>
		<br>
		<input type="file" name="image" accept="image/png, image/gif, image/jpeg, video/webm, video/ogg, audio/ogg, application/ogg, video/mp4, audio/mp4, audio/mp3, application/zip, application/x-7z-compressed, application/x-xz, application/x-gzip">
		<br>
	</span>
{% endstripspace %}{% endfunc %}

Link to catalog or board page
{% func catalogLink(catalog bool) %}{% stripspace %}
	{% code ln := lang.Get().UI %}
	{% if catalog %}
		<a class="button board-nav-item board-nav-back" href=".">
			{%s ln["return"] %}
		</a>
	{% else %}
		<a class="button board-nav-item board-nav-catalog" href="catalog">
			{%s ln["catalog"] %}
		</a>
	{% endif %}
{% endstripspace %}{% endfunc %}

Links to different pages og the board index
{% func pagination(page, total int) %}{% stripspace %}
	{% if total < 2 %}
		{% return %}
	{% endif %}
	<div class="board-pagination">
		{% if page != 0 %}
			{% if page-1 != 0 %}
				{%= pageLink(0, "<<", "first") %}
			{% endif %}
			{%= pageLink(page-1, "<", "prev") %}
		{% endif %}
		{% for i := 0; i < total; i++ %}
			{% if i == page %}
				<span class="board-pagination-page board-pagination-page_current">
					{%d i %}
				</span>
			{% else %}
				{%= pageLink(i, strconv.Itoa(i), "") %}
			{% endif %}
		{% endfor %}
		{% if page != total-1 %}
			{%= pageLink(page+1, ">", "next") %}
			{% if page+1 != total-1 %}
				{%= pageLink(total-1, ">>", "last") %}
			{% endif %}
		{% endif %}
	</div>
{% endstripspace %}{% endfunc %}

Link to a different paginated board page
{% func pageLink(i int, text, cls string) %}{% stripspace %}
	{% code if cls != "" { cls = " board-pagination-page_" + cls } %}
	<a class="button board-pagination-page{%s cls %}" href="?page={%d i %}">
		{%s text %}
	</a>
{% endstripspace %}{% endfunc %}
