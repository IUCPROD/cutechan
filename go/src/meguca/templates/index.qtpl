{% import "encoding/json" %}
{% import "meguca/config" %}
{% import "meguca/lang" %}
{% import "meguca/auth" %}

Renders the tab selection butts in tabbed windows
{% func tabButts(names []string) %}{% stripspace %}
	<div class="tab-butts">
		{% for i, n := range names %}
			<a class="tab-link{% if i == 0 %}{% space %}tab-sel{% endif %}" data-id="{%d i %}">
				{%s n %}
			</a>
		{% endfor %}
	</div>
	<hr>
{% endstripspace %}{% endfunc %}

{% func faqModal() %}{% stripspace %}
	<div id="FAQ" class="modal">
		cutechan is licensed under the{% space %}
		<a href="https://www.gnu.org/licenses/agpl.html" target="_blank">
			GNU Affero General Public License
		</a>
		<br>
		source code repository:{% space %}
		<a href="https://github.com/cutechan/cutechan" target="_blank">
			github.com/cutechan/cutechan
		</a>
		<br>
		original project:{% space %}
		<a href="https://github.com/bakape/meguca" target="_blank">
			github.com/bakape/meguca
		</a>
		<br>
		contacts:{% space %}
		<a href="mailto:kagami@genshiken.org">
			kagami@genshiken.org
		</a>
	</div>
{% endstripspace %}{% endfunc %}

{% func accountModal(pos auth.ModerationLevel) %}{% stripspace %}
	{% code ln := lang.Get() %}
	<div id="account-panel" class="modal">
		{% if pos == auth.NotLoggedIn %}
			<div id="login-forms">
				{% code f := ln.Forms %}
				{%= tabButts([]string{f["id"][0], f["register"][0]}) %}
				<div class="tab-cont">
					<div class="tab-sel" data-id="0">
						<form id="login-form">
							{%= table(specs["login"]) %}
							{%= captcha() %}
							{%= submit(false) %}
						</form>
					</div>
					<div data-id="1">
						<form id="registration-form">
							{%= table(specs["register"]) %}
							{%= captcha() %}
							{%= submit(false) %}
						</form>
					</div>
				</div>
			</div>
		{% else %}
			<div id="form-selection">
				{% for _, l := range [...]string{
					"logout", "logoutAll", "changePassword",
					"createBoard",
					"configureBoard", "setBanners", "assignStaff",
					"deleteBoard",
				} %}
					<a class="form-selection-link" id="{%s l %}">
						{%s ln.UI[l] %}
					</a>
				{% endfor %}
				{% if pos == auth.Admin %}
					<a class="form-selection-link" id="configureServer">
						{%s ln.UI["configureServer"] %}
					</a>
				{% endif %}
			</div>
		{% endif %}
	</div>
{% endstripspace %}{% endfunc %}

{% func optionsModal() %}{% stripspace %}
	{% code ln := lang.Get() %}
	<div id="options" class="modal">
		{%= tabButts(ln.Tabs) %}
		<div class="tab-cont">
			{% for i, sp := range optionSpecs %}
				<div data-id="{%d i %}"{% if i == 0 %}{% space %}class="tab-sel"{% endif %}>
					{%= options(sp, ln) %}
				</div>
			{% endfor %}
		</div>
	</div>
{% endstripspace %}{% endfunc %}

{% func renderHeader(boards config.BoardTitles) %}{% stripspace %}
	{% code ln := lang.Get() %}
	<header class="header">
		<a class="header-item header-logo" href="/" title="{%s ln.UI["main"] %}">
			<i class="logo"></i>
		</a>
		<a class="header-item header-board" href="/all/">{%s ln.UI["aggregator"] %}</a>
		{% for _, b := range boards %}
			<a class="header-item header-board" href="/{%s b.ID %}/">{%s b.Title %}</a>
		{% endfor %}
		<div class="header-spacer"></div>
		<span class="header-item header-counter" id="sync-counter" title="{%s ln.UI["syncCount"] %}"></span>
		<span class="header-item header-status" id="sync-status" title="{%s ln.UI["sync"] %}"></span>
		<a class="header-item header-icon header-faq-icon" id="header-FAQ" title="{%s ln.UI["FAQ"] %}">
			<i class="fa fa-info-circle"></i>
		</a>
		<a class="header-item header-icon header-account-icon" id="header-account" title="{%s ln.UI["account"] %}">
			<i class="fa fa-user-circle-o"></i>
		</a>
		<a class="header-item header-icon header-options-icon" id="header-options" title="{%s ln.UI["options"] %}">
			<i class="fa fa-gear"></i>
		</a>
	</header>
{% endstripspace %}{% endfunc %}

{% func renderIndex(pos auth.ModerationLevel) %}{% stripspace %}
	{% code conf := config.Get() %}
	{% code confJSON, _ := config.GetClient() %}
	{% code boards := config.GetBoardTitles() %}
	{% code boardJSON, _ := json.Marshal(boards) %}
	<!DOCTYPE html>
	<html class="{%s posClass(pos) %}">
	<head>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1">
		<meta name="application-name" content="cutechan">
		<meta name="description" content="Cute chan">
		<title>$$$</title>
		<link rel="icon" href="/static/favicons/default.ico" id="favicon">
		<link rel="manifest" href="/static/mobile/manifest.json">
		<link rel="stylesheet" href="/static/css/{%s conf.DefaultCSS %}.css" id="theme-css">
		{% if conf.ImageRootOverride != "" %}
			<link rel="dns-prefetch" href="{%s conf.ImageRootOverride %}">
		{% endif %}
		<script>
			var config={%z= confJSON %},boards={%z= boardJSON %},position={%d int(pos) %};
			if (localStorage.theme !== config.DefaultCSS) {
				document.getElementById("theme-css").href = "/static/css/" + localStorage.theme + ".css";
			}
		</script>
		{% if pos > auth.NotLoggedIn %}
			<template name="keyValue">{%= keyValueForm("", "") %}</template>
			<template name="arrayItem">{%= arrayItemForm("") %}</template>
		{% endif %}
	</head>
	<body>
		{%= renderHeader(boards) %}
		<main class="main">$$$</main>
		<aside class="alerts-container"></aside>
		<aside class="hover-container"></aside>
		<aside class="popup-container"></aside>
		<aside class="modal-container">
			{%= faqModal() %}
			{%= accountModal(pos) %}
			{%= optionsModal() %}
		</aside>
		<script src="/static/js/loader.js"></script>
	</body>
	</html>
{% endstripspace %}{% endfunc %}

Minimal possible page for reuse.
{% func BasePage(content []byte) %}{% stripspace %}
	<!DOCTYPE html>
	<html>
	<head>
		<meta charset="utf-8">
		<link rel="icon" href="/static/favicons/default.ico">
	</head>
	<body>
		{%z= content %}
	</body>
	</html>
{% endstripspace %}{% endfunc %}

Custom not found page.
{% func NotFound() %}{% stripspace %}
	{% code ln := lang.Get() %}
	<!DOCTYPE html>
	<html>
	<head>
		<meta charset="utf-8">
		<link rel="icon" href="/static/favicons/default.ico">
		<title>{%s ln.UI["notFound"] %}</title>
		<style>
			html, body {
				margin: 0;
				padding: 0;
				height: 100%;
			}
			body {
				color: #fff;
				background: #131416;
				font-family: Helvetica, sans-serif;
			}
			main {
				height: 100%;
				display: flex;
				text-align: center;
				flex-direction: column;
				justify-content: center;
				background: center / contain no-repeat url(/static/img/luda.jpg);
			}
			h1 {
				font-size: 56px;
				font-weight: normal;
				margin: 0;
				margin-bottom: 10px;
			}
			h2 {
				font-size: 26px;
				font-weight: normal;
				margin: 0;
			}
		</style>
	</head>
	<body>
		<main>
			<h1>404</h3>
			<h2>{%s ln.UI["notFound"] %}</h2>
		</main>
	</body>
	</html>
{% endstripspace %}{% endfunc %}
