{% import "meguca/config" %}
{% import "meguca/lang" %}
{% import "meguca/auth" %}

OwnedBoard renders a form for selecting one of several boards owned by the user
{% func OwnedBoard(boards config.BoardTitles) %}{% stripspace %}
	{% if len(boards) != 0 %}
		<select name="boards" required>
			{% for _, b := range boards %}
				<option value="{%s b.ID %}">
					{%= formatTitle(b.ID, b.Title) %}
				</option>
			{% endfor %}
		</select>
		<br>
		{%= submit(true) %}
	{% else %}
		{%s lang.Get().UI["ownNoBoards"] %}
		<br>
		<br>
		{%= cancel() %}
		<div class="form-response admin"></div>
	{% endif %}
{% endstripspace %}{% endfunc %}

{% func formatTitle(id, title string) %}{% stripspace %}
	/{%s id %}/{% space %}-{% space %}{%s title %}
{% endstripspace %}{% endfunc %}

BoardNavigation renders a board selection and search form
{% func BoardNavigation() %}{% stripspace %}
	{% code ln := lang.Get().UI %}
	<input type="text" class="full-width" name="search" placeholder="{%s ln["search"] %}">
	<br>
	<form>
		<span class="flex">
			{%= submit(true) %}
			<label>
				<input type="checkbox" name="pointToCatalog">
				{%s ln["pointToCatalog"] %}
			</label>
		</span>
		<div>
			{% for _, b := range config.GetBoardTitles() %}
				<label class="board">
					<input type="checkbox" name="{%s b.ID %}">
					<a href="/{%s b.ID %}/">
						{%= formatTitle(b.ID, b.Title) %}
					</a>
					<br>
				</label>
			{% endfor %}
		</div>
	</form>
{% endstripspace %}{% endfunc %}

CreateBoard renders a the form for creating new boards
{% func CreateBoard() %}{% stripspace %}
	{%= table(specs["createBoard"]) %}
	{%= CaptchaConfirmation() %}
{% endstripspace %}{% endfunc %}

CaptchaConfirmation renders a confirmation form with an optional captcha
{% func CaptchaConfirmation() %}{% stripspace %}
	{%= captcha() %}
	{%= submit(true) %}
{% endstripspace %}{% endfunc %}

{% func captcha() %}{% stripspace %}
	{% if !config.Get().Captcha %}
		{% return %}
	{% endif %}
	{% code ln := lang.Get().UI %}
	<div class="captcha-container full-width">
		<img>
		<noscript>
			<iframe width="240" height="100" marginwidth="0" marginheight="0" src="/api/captcha/noscript/load"></iframe>
		</noscript>
		<input type="text" name="captchaID" placeholder="{%s ln["captchaID"] %}" required>
		<input name="captcha" placeholder="{%s ln["captcha"] %}" type="number" autocomplete="off" required>
	</div>
{% endstripspace %}{% endfunc %}

Form for inputting key-value map-like data
{% func keyValueForm(k, v string) %}{% stripspace %}
	<span>
		<input type="text" class="map-field" value="{%s k %}">
		<input type="text" class="map-field" value="{%s v %}">
		<a class="map-remove">
			[X]
		</a>
		<br>
	</span>
{% endstripspace %}{% endfunc %}

Form for inputting one array-like form item
{% func arrayItemForm(v string) %}{% stripspace %}
	<span>
		<input type="text" class="array-field" value="{%s v %}">
		<a class="array-remove">
			[X]
		</a>
		<br>
	</span>
{% endstripspace %}{% endfunc %}

Form formatted as a table, with cancel and submit buttons
{% func tableForm(specs []inputSpec, needCaptcha bool) %}{% stripspace %}
	{%= table(specs) %}
	{% if needCaptcha %}
		{%= captcha() %}
	{% endif %}
	{%= submit(true) %}
{% endstripspace %}{% endfunc %}

Render a map form for inputting map-like data
{% func renderMap(spec inputSpec) %}{% stripspace %}
	{% code ln := lang.Get() %}
	<div class="map-form" name="{%s spec.ID %}" title="{%s ln.Forms[spec.ID][1] %}">
		{% for k, v := range spec.Val.(map[string]string) %}
			{%= keyValueForm(k, v) %}
		{% endfor %}
		<a class="map-add">
			{%s ln.UI["add"] %}
		</a>
		<br>
	</div>
{% endstripspace %}{% endfunc %}

Render form for inputting array-like data
{% func renderArray(spec inputSpec) %}{% stripspace %}
	{% code ln := lang.Get() %}
	<div class="array-form" name="{%s spec.ID %}" title="{%s ln.Forms[spec.ID][1] %}">
		{% for _, v := range spec.Val.([]string) %}
			{%= arrayItemForm(v) %}
		{% endfor %}
		<a class="array-add">
			{%s ln.UI["add"] %}
		</a>
		<br>
	</div>
{% endstripspace %}{% endfunc %}

Render submit and cancel buttons
{% func submit(cancel bool) %}{% stripspace %}
	<input type="submit" value="{%s lang.Get().UI["submit"] %}">
	{% if cancel %}
		{%= cancel() %}
	{% endif %}
	<div class="form-response admin"></div>
{% endstripspace %}{% endfunc %}

Renders a cancel button
{% func cancel() %}{% stripspace %}
	<input type="button" name="cancel" value="{%s lang.Get().UI["cancel"] %}">
{% endstripspace %}{% endfunc %}

Render link to request new noscript captcha
{% func NoscriptCaptchaLink() %}{% stripspace %}
	<a href="/api/captcha/noscript/new" style="display: flex; width: 100%; height: 100%;">
		<span style="align-self: center; margin: auto;">
			{%s lang.Get().UI["loadCaptcha"] %}
		</span>
	</a>
{% endstripspace %}{% endfunc %}

Render the captcha for noscript browsers
{% func NoscriptCaptcha(ip string) %}{% stripspace %}
	{% code id := auth.GetNoscriptCaptcha(ip) %}
	<div style="display: grid">
		<span>
			ID:{% space %}{%s id %}
		</span>
		<img src="/api/captcha/image/{%s id %}.png">
	</div>
{% endstripspace %}{% endfunc %}

Renders the tab selection butts in tabbed windows
{% func tabButts(names []string) %}{% stripspace %}
	<div class="tab-butts">
		{% for i, n := range names %}
			<a class="tab-link{% if i == 0 %}{% space %}tab-sel{% endif %}" data-id="{%d i %}">
				{%s n %}
			</a>
		{% endfor %}
	</div>
	<hr>
{% endstripspace %}{% endfunc %}

{% func faqModal() %}{% stripspace %}
	<div id="FAQ" class="modal">
		cutechan is licensed under the{% space %}
		<a href="https://www.gnu.org/licenses/agpl.html" target="_blank">
			GNU Affero General Public License
		</a>
		<br>
		source code repository:{% space %}
		<a href="https://github.com/cutechan/cutechan" target="_blank">
			github.com/cutechan/cutechan
		</a>
		<br>
		original project:{% space %}
		<a href="https://github.com/bakape/meguca" target="_blank">
			github.com/bakape/meguca
		</a>
		<br>
		contacts:{% space %}
		<a href="mailto:kagami@genshiken.org">
			kagami@genshiken.org
		</a>
	</div>
{% endstripspace %}{% endfunc %}

{% func accountModal(pos auth.Positions) %}{% stripspace %}
	{% code ln := lang.Get() %}
	{% code f := ln.Forms %}
	<div id="account-panel" class="modal">
		{% if pos.CurBoard == auth.NotLoggedIn %}
			{%= tabButts([]string{f["id"][0], f["register"][0]}) %}
			<div class="tab-cont">
				<div class="tab-sel" data-id="0">
					<form id="login-form">
						{%= table(specs["login"]) %}
						{%= captcha() %}
						{%= submit(false) %}
					</form>
				</div>
				<div data-id="1">
					<form id="registration-form">
						{%= table(specs["register"]) %}
						{%= captcha() %}
						{%= submit(false) %}
					</form>
				</div>
			</div>
		{% else %}
			{%= tabButts([]string{f["ops"][0], f["identity"][0]}) %}
			<div class="tab-cont">
				<div class="tab-sel" data-id="0" id="form-selection">
					{% for _, l := range [...]string{
						"logout", "logoutAll", "changePassword",
						"createBoard",
						"configureBoard", "assignStaff",
						"deleteBoard",
					} %}
						<a class="form-selection-link" id="{%s l %}">
							{%s ln.UI[l] %}
							{% if l == "logout" %}
								,{% space %}{%s pos.UserID %}
							{% endif %}
						</a>
					{% endfor %}
					{% if pos.CurBoard == auth.Admin %}
						<a class="form-selection-link" id="configureServer">
							{%s ln.UI["configureServer"] %}
						</a>
					{% endif %}
				</div>
				<div data-id="1" class="account-identity-tab"></div>
			</div>
		</div>
		{% endif %}
	</div>
{% endstripspace %}{% endfunc %}

{% func optionsModal() %}{% stripspace %}
	{% code ln := lang.Get() %}
	<div id="options" class="modal">
		{%= tabButts(ln.Tabs) %}
		<div class="tab-cont">
			{% for i, sp := range optionSpecs %}
				<div data-id="{%d i %}"{% if i == 0 %}{% space %}class="tab-sel"{% endif %}>
					{%= options(sp, ln) %}
				</div>
			{% endfor %}
		</div>
	</div>
{% endstripspace %}{% endfunc %}
